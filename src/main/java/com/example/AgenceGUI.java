//zzz
package com.example;

import com.example.Administration.*;
import com.example.vehicules.*;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class AgenceGUI extends javax.swing.JFrame {

    public AgenceGUI() {
        initComponents();

        tablemodele = (DefaultTableModel) TableVehicules.getModel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxVehicule = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableVehicules = new javax.swing.JTable();
        Filter = new javax.swing.JComboBox<>();
        FilterValue = new javax.swing.JTextField();
        Applyfilter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBoxVehicule
                .setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Camionnette", "Minibus", "Voiture" }));
        jComboBoxVehicule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxVehiculeActionPerformed(evt);
            }
        });

        TableVehicules.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {

                },
                new String[] {
                        "Marque", "Modele", "Reference", "Couleur", "nb Places", "Charge"
                }));
        jScrollPane1.setViewportView(TableVehicules);

        jScrollPane2.setViewportView(jScrollPane1);

        Filter.setModel(new javax.swing.DefaultComboBoxModel<>(
                new String[] { "Modele", "Marque", "Reference", "Couleur", "Charge" }));
        Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterActionPerformed(evt);
            }
        });

        FilterValue.setToolTipText("Veuillez saisir la valeur du filtre");
        FilterValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterValueActionPerformed(evt);
            }
        });

        Applyfilter.setText("Apply");
        Applyfilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyfilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(150, 150, 150)
                                                        .addComponent(FilterValue,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 219,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(Applyfilter,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 153,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 820,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jComboBoxVehicule, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] { Filter, jComboBoxVehicule });

        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(jComboBoxVehicule, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(FilterValue, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Applyfilter))
                                .addGap(33, 33, 33)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(238, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ApplyfilterActionPerformed(java.awt.event.ActionEvent evt) {
        // GEN-FIRST:event_ApplyfilterActionPerformed
        // TODO add your handling code here:

        tablemodele.setRowCount(0);
        switch (jComboBoxVehicule.getSelectedItem().toString()) {
            case "Voiture": {
                try {
                    voiture();
                } catch (SQLException ex) {
                    Logger.getLogger(AgenceGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
                break;

            case "Camionnette": {
                try {
                    camionette();
                } catch (SQLException ex) {
                    Logger.getLogger(AgenceGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
                break;

            case "Minbus":
                minibus();
                break;
            default:
                System.out.println("autre ....");

        }
    }// GEN-LAST:event_ApplyfilterActionPerformed

    private void FilterActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_FilterActionPerformed
        // TODO add your handling code here:

    }// GEN-LAST:event_FilterActionPerformed

    private void FilterValueActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_FilterValueActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_FilterValueActionPerformed

    private void jComboBoxVehiculeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jComboBoxVehiculeActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jComboBoxVehiculeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgenceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgenceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgenceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgenceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgenceGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Applyfilter;
    private javax.swing.JComboBox<String> Filter;
    private javax.swing.JTextField FilterValue;
    private javax.swing.JTable TableVehicules;
    private javax.swing.JComboBox<String> jComboBoxVehicule;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void voiture() throws SQLException {
        switch (Filter.getSelectedItem().toString()) {
            case "Modele":
                AdministrationVoiture adminModele = new AdministrationVoiture();
                LinkedList<Voiture> voituresModele = adminModele.RechercheParModele(FilterValue.getText());
                DefaultTableModel tablemodeleModele = (DefaultTableModel) TableVehicules.getModel();
                String[][] tableModele = new String[voituresModele.size()][6];

                for (int i = 0; i < voituresModele.size(); i++) {
                    tableModele[i][0] = voituresModele.get(i).getModele();
                    tableModele[i][1] = voituresModele.get(i).getMarque();
                    tableModele[i][2] = voituresModele.get(i).getReference();
                    tableModele[i][3] = voituresModele.get(i).getCouleur();
                    tableModele[i][4] = "";
                    tableModele[i][5] = "";

                    tablemodeleModele.addRow(tableModele[i]);
                }
                break;

            case "Reference":
                AdministrationVoiture adminReference = new AdministrationVoiture();
                LinkedList<Voiture> voituresReference = adminReference.RechercheParReference(FilterValue.getText());
                DefaultTableModel tablemodeleReference = (DefaultTableModel) TableVehicules.getModel();
                String[][] tableReference = new String[voituresReference.size()][6];

                for (int i = 0; i < voituresReference.size(); i++) {
                    tableReference[i][0] = voituresReference.get(i).getModele();
                    tableReference[i][1] = voituresReference.get(i).getMarque();
                    tableReference[i][2] = voituresReference.get(i).getReference();
                    tableReference[i][3] = voituresReference.get(i).getCouleur();
                    tableReference[i][4] = "";
                    tableReference[i][5] = "";

                    tablemodeleReference.addRow(tableReference[i]);
                }
                break;

            case "Couleur":
                AdministrationVoiture adminCouleur = new AdministrationVoiture();
                LinkedList<Voiture> voituresCouleur = adminCouleur.RechercheParCouleur(FilterValue.getText());
                DefaultTableModel tablemodeleCouleur = (DefaultTableModel) TableVehicules.getModel();
                String[][] tableCouleur = new String[voituresCouleur.size()][6];

                for (int i = 0; i < voituresCouleur.size(); i++) {
                    tableCouleur[i][0] = voituresCouleur.get(i).getModele();
                    tableCouleur[i][1] = voituresCouleur.get(i).getMarque();
                    tableCouleur[i][2] = voituresCouleur.get(i).getReference();
                    tableCouleur[i][3] = voituresCouleur.get(i).getCouleur();
                    tableCouleur[i][4] = "";
                    tableCouleur[i][5] = "";

                    tablemodeleCouleur.addRow(tableCouleur[i]);
                }
                break;

            case "Marque":
                AdministrationVoiture adminMarque = new AdministrationVoiture();
                LinkedList<Voiture> voituresMarque = adminMarque.RechercheParMarque(FilterValue.getText());
                DefaultTableModel tablemodeleMarque = (DefaultTableModel) TableVehicules.getModel();
                String[][] tableMarque = new String[voituresMarque.size()][6];

                for (int i = 0; i < voituresMarque.size(); i++) {
                    tableMarque[i][0] = voituresMarque.get(i).getModele();
                    tableMarque[i][1] = voituresMarque.get(i).getMarque();
                    tableMarque[i][2] = voituresMarque.get(i).getReference();
                    tableMarque[i][3] = voituresMarque.get(i).getCouleur();
                    tableMarque[i][4] = "";
                    tableMarque[i][5] = "";

                    tablemodeleMarque.addRow(tableMarque[i]);
                }
                break;
        }
    }

    private void camionette() throws SQLException {
        switch (Filter.getSelectedItem().toString()) {
            case "Modele":
                AdministrationCamionnette adminModele = new AdministrationCamionnette();
                LinkedList<Camionette> camionettesModele = adminModele.RechercheParModele(FilterValue.getText());
                DefaultTableModel tablemodeleModele = (DefaultTableModel) TableVehicules.getModel();
                String[][] tableModele = new String[camionettesModele.size()][7];

                for (int i = 0; i < camionettesModele.size(); i++) {
                    tableModele[i][0] = camionettesModele.get(i).getModele();
                    tableModele[i][1] = camionettesModele.get(i).getMarque();
                    tableModele[i][2] = camionettesModele.get(i).getReference();
                    tableModele[i][3] = camionettesModele.get(i).getCouleur();
                    tableModele[i][4] = "";
                    tableModele[i][5] = "";
                    tableModele[i][6] = "";

                    tablemodeleModele.addRow(tableModele[i]);
                }
                break;

            case "Reference":
                AdministrationCamionnette adminReference = new AdministrationCamionnette();
                LinkedList<Camionette> camionettesReference = adminReference
                        .RechercheParReference(FilterValue.getText());
                DefaultTableModel tablemodeleReference = (DefaultTableModel) TableVehicules.getModel();
                String[][] tableReference = new String[camionettesReference.size()][7];

                for (int i = 0; i < camionettesReference.size(); i++) {
                    tableReference[i][0] = camionettesReference.get(i).getModele();
                    tableReference[i][1] = camionettesReference.get(i).getMarque();
                    tableReference[i][2] = camionettesReference.get(i).getReference();
                    tableReference[i][3] = camionettesReference.get(i).getCouleur();
                    tableReference[i][4] = "";
                    tableReference[i][5] = "";
                    tableReference[i][6] = "";

                    tablemodeleReference.addRow(tableReference[i]);
                }
                break;

            case "Couleur":
                AdministrationCamionnette adminCouleur = new AdministrationCamionnette();
                LinkedList<Camionette> camionettesCouleur = adminCouleur.RechercheParCouleur(FilterValue.getText());
                DefaultTableModel tablemodeleCouleur = (DefaultTableModel) TableVehicules.getModel();
                String[][] tableCouleur = new String[camionettesCouleur.size()][7];

                for (int i = 0; i < camionettesCouleur.size(); i++) {
                    tableCouleur[i][0] = camionettesCouleur.get(i).getModele();
                    tableCouleur[i][1] = camionettesCouleur.get(i).getMarque();
                    tableCouleur[i][2] = camionettesCouleur.get(i).getReference();
                    tableCouleur[i][3] = camionettesCouleur.get(i).getCouleur();
                    tableCouleur[i][4] = "";
                    tableCouleur[i][5] = "";
                    tableCouleur[i][6] = "";

                    tablemodeleCouleur.addRow(tableCouleur[i]);
                }
                break;

        }
    }

    private void minibus() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from
                                                                       // nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    DefaultTableModel tablemodele;
}
